AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Course-Service-Deployment-Descriptor

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    AutoPublishAlias: !Ref Stage
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker
    CodeUri: ./application
    Tags:
      Stage: !Ref Stage
      Service: LMSCourse
      Resource: Lambda
    Environment:
      Variables:
        TABLE: !Ref LMSCourseTable
        APPLICATION_ENVIRONMENT: !Ref Stage
        CLOUD_REGION: us-east-1
        MAIN_CLASS: com.tekcapzule.course.application.CourseApplication
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:

  # Setup API Gateway

  LMSCourseApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "lmscourse-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  # Setup DynamoDB Table

  LMSCourseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}LMSCourse"
      AttributeDefinitions:
        - AttributeName: courseId
          AttributeType: S
        - AttributeName: topicCode
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: recommendations
          AttributeType: N
        - AttributeName: courseLevel
          AttributeType: S
        - AttributeName: duration
          AttributeType: S
      KeySchema:
        - AttributeName: courseId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: topicGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: topicCode
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: statusGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: levelGSI
          KeySchema:
            - AttributeName: courseLevel
              KeyType: HASH
            - AttributeName: topicCode
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: durationGSI
          KeySchema:
            - AttributeName: duration
              KeyType: HASH
            - AttributeName: topicCode
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: trendingGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: recommendations
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # Setup Lambda Functions

  CreateCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-CreateCourse"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/create
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  UpdateCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-UpdateCourse"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/update
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  GetCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetCourse"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/get
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  GetAllCoursesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetAllCourses"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getAllFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/getAll
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  RecommendCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-RecommendCourse"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: recommendFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/recommend
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  ApproveCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-ApproveCourse"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: approveFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/approve
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  GetCourseByTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetCourseByTopic"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getByTopicFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/getByTopic
            Method: post
            RestApiId:
              Ref: LMSCourseApi


  GetCourseByStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetCourseByStatus"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getByStatusFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/getByStatus
            Method: post
            RestApiId:
              Ref: LMSCourseApi


  GetCourseByDurationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetCourseByDuration"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getByDurationFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/getByDuration
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  GetCourseByLevelFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-GetCourseByLevel"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getByLevelFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/getByLevel
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  CreateCourseQuizFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-CreateQuiz"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createQuizFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/createQuiz
            Method: post
            RestApiId:
              Ref: LMSCourseApi

  ValidateCourseQuizFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-LMSCourse-ValidateQuiz"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LMSCourseTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: validateQuizFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: lmscourse/validateQuiz
            Method: post
            RestApiId:
              Ref: LMSCourseApi
  # Set Output Variable

Outputs:
  ApiEndpoint:
    Description: "Course API endpoint."
    Value: !Sub "https://${LMSCourseApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/course"
